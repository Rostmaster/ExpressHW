doctype html 
head 
    title Grades
    script(src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js")
    link(rel="shortcut icon" href="#" type="image/x-icon")
body
    include templates/header.pug

    h2 Grades of the students: 

    table( id="gradesTable" )
        thead 
            tr 
                th ID 
                th Student ID 
                th Subject
                th Grade
                th Link
                th Options
        tbody 
            each grade in grades
                tr(id=`row-${grade.id}`)
                    td= grade.id
                    td= grade['student_id']
                    td= grade.subject
                    td= grade.grade
                    td
                        a(href=`http://localhost:3000/api/grades/${grade.id}`) to page
                    td
                        button(id=`editBtn-${grade.id}`) üñâ
                        button(id=`deleteBtn-${grade.id}`) üóë
            tr(id="addRow") 
                td
                td 
                    input(type="number" placeholder='Student ID' id='newStudentID')
                td
                    input(type="text" placeholder='Subject' id='newSubject')
                td
                    input(type="number" placeholder='Grade' id='newGrade')
                td  ----------
                td 
                    button(id="addBtn") Add



script.
    const table = document.getElementById('gradesTable');

    let del = async (id) =>{
        await fetch(`http://localhost:3000/api/grades/${id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        })
        window.location = ('http://localhost:3000/api/grades/');
    }

    let add = async  () =>{
        const student_id = $('#newStudentID').val();
        const subject = $('#newSubject').val();
        const grade = $('#newGrade').val();
        await fetch(`http://localhost:3000/api/grades`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({student_id,subject,grade})
        })
            window.location = ('http://localhost:3000/api/grades/');
    }

    let edit = async (id) =>{
        $('#addRow').hide()
        let row = $(`#row-${id}`)
        let studentID = row.find("td:eq(1)").text(); 
        let subject = row.find("td:eq(2)").text(); 
        let grade = row.find("td:eq(3)").text();

        let idCell = $(`<td id="editId">${id}</td>`)
        let studentIDCell = $(`<td><input type="text" value="${studentID}" id="editStudentID"></td>`)
        let subjectCell = $(`<td><input type="text" value="${subject}" id="editSubject"></td>`)
        let gradeCell = $(`<td><input type="number" value="${grade}" id="editGrade"></td>`)
        let linkCell = $(`<td> ---------- </td>`)
        let optionsCell = $(`<td><button id="saveBtn-${id}">‚úîÔ∏è</button><button id="cancelBtn">‚ùå</button></td>`)

        row.find("td:eq(1)").replaceWith(idCell)
        row.find("td:eq(1)").replaceWith(studentIDCell)
        row.find("td:eq(2)").replaceWith(subjectCell)
        row.find("td:eq(3)").replaceWith(gradeCell)
        row.find("td:eq(4)").replaceWith(linkCell)
        row.find("td:eq(5)").replaceWith(optionsCell)
    }

    let save = async (id) =>{
        console.log('save:',id)
        const studentID = $('#editStudentID').val();
        const subject = $('#editSubject').val();
        const grade = $('#editGrade').val();
        console.log(`${id}, ${studentID}, ${subject}, ${grade}`)

        await fetch(`http://localhost:3000/api/grades/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({studentID,subject,grade})
        })
        window.location = ('http://localhost:3000/api/grades/');

    }
    let cancel = async () =>{
        window.location.reload();
    }

    table.addEventListener('click', (event) => {
    const isButton = event.target.nodeName === 'BUTTON';
    if (!isButton) {
        return;
    }
    let id = event.target.id
    console.dir(id);
    if(id.startsWith('editBtn')) edit(id.split('-')[1])
    if(id.startsWith('deleteBtn'))  del(id.split('-')[1])
    if(id.startsWith('saveBtn')) save(id.split('-')[1])
    if(id.startsWith('cancelBtn')) cancel()
    if(id.startsWith('addBtn')) add() 
    })


style(type="text/css").
    table {
        border-collapse: collapse;
        border: 1px solid #ddd;
    }
    thead{
        background-color: #f99d41;
        color: white;
    }
    th, td {
        text-align: left;
        padding: 8px 10px;
        border: 1px solid #ddd;
    }
    tr td:nth-child(6){
        width:auto;
        display:flex;
        justify-content: space-around;
    }
    a{
        text-decoration: none;
        color: black;
    }
